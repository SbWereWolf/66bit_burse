#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Burse.LinqToMSSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="66bit_Burse")]
	public partial class BurseMSSqlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBuyOrder(BuyOrder instance);
    partial void UpdateBuyOrder(BuyOrder instance);
    partial void DeleteBuyOrder(BuyOrder instance);
    partial void InsertSellOrder(SellOrder instance);
    partial void UpdateSellOrder(SellOrder instance);
    partial void DeleteSellOrder(SellOrder instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    #endregion
		
		public BurseMSSqlDataContext() : 
				base(global::Burse.LinqToMSSql.Properties.Settings.Default._66bit_BurseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BurseMSSqlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BurseMSSqlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BurseMSSqlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BurseMSSqlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BuyOrder> BuyOrders
		{
			get
			{
				return this.GetTable<BuyOrder>();
			}
		}
		
		public System.Data.Linq.Table<SellOrder> SellOrders
		{
			get
			{
				return this.GetTable<SellOrder>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<TransactionsOverview_V> TransactionsOverview_Vs
		{
			get
			{
				return this.GetTable<TransactionsOverview_V>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BuyOrders")]
	public partial class BuyOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<System.DateTimeOffset> _BuyDate;
		
		private System.Nullable<decimal> _BuyPrice;
		
		private System.Nullable<long> _NumbersToBuy;
		
		private string _BuyComment;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnBuyDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnBuyDateChanged();
    partial void OnBuyPriceChanging(System.Nullable<decimal> value);
    partial void OnBuyPriceChanged();
    partial void OnNumbersToBuyChanging(System.Nullable<long> value);
    partial void OnNumbersToBuyChanged();
    partial void OnBuyCommentChanging(string value);
    partial void OnBuyCommentChanged();
    #endregion
		
		public BuyOrder()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> BuyDate
		{
			get
			{
				return this._BuyDate;
			}
			set
			{
				if ((this._BuyDate != value))
				{
					this.OnBuyDateChanging(value);
					this.SendPropertyChanging();
					this._BuyDate = value;
					this.SendPropertyChanged("BuyDate");
					this.OnBuyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyPrice", DbType="Decimal(15,2)")]
		public System.Nullable<decimal> BuyPrice
		{
			get
			{
				return this._BuyPrice;
			}
			set
			{
				if ((this._BuyPrice != value))
				{
					this.OnBuyPriceChanging(value);
					this.SendPropertyChanging();
					this._BuyPrice = value;
					this.SendPropertyChanged("BuyPrice");
					this.OnBuyPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumbersToBuy", DbType="BigInt")]
		public System.Nullable<long> NumbersToBuy
		{
			get
			{
				return this._NumbersToBuy;
			}
			set
			{
				if ((this._NumbersToBuy != value))
				{
					this.OnNumbersToBuyChanging(value);
					this.SendPropertyChanging();
					this._NumbersToBuy = value;
					this.SendPropertyChanged("NumbersToBuy");
					this.OnNumbersToBuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyComment", DbType="NVarChar(4000)")]
		public string BuyComment
		{
			get
			{
				return this._BuyComment;
			}
			set
			{
				if ((this._BuyComment != value))
				{
					this.OnBuyCommentChanging(value);
					this.SendPropertyChanging();
					this._BuyComment = value;
					this.SendPropertyChanged("BuyComment");
					this.OnBuyCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BuyOrder_Transaction", Storage="_Transactions", ThisKey="Id", OtherKey="BuyOrder")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.BuyOrder1 = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.BuyOrder1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SellOrders")]
	public partial class SellOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _SellDate;
		
		private string _SellPrice;
		
		private string _NumbersToSell;
		
		private string _SellComment;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSellDateChanging(string value);
    partial void OnSellDateChanged();
    partial void OnSellPriceChanging(string value);
    partial void OnSellPriceChanged();
    partial void OnNumbersToSellChanging(string value);
    partial void OnNumbersToSellChanged();
    partial void OnSellCommentChanging(string value);
    partial void OnSellCommentChanged();
    #endregion
		
		public SellOrder()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellDate", DbType="NChar(10)")]
		public string SellDate
		{
			get
			{
				return this._SellDate;
			}
			set
			{
				if ((this._SellDate != value))
				{
					this.OnSellDateChanging(value);
					this.SendPropertyChanging();
					this._SellDate = value;
					this.SendPropertyChanged("SellDate");
					this.OnSellDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellPrice", DbType="NChar(10)")]
		public string SellPrice
		{
			get
			{
				return this._SellPrice;
			}
			set
			{
				if ((this._SellPrice != value))
				{
					this.OnSellPriceChanging(value);
					this.SendPropertyChanging();
					this._SellPrice = value;
					this.SendPropertyChanged("SellPrice");
					this.OnSellPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumbersToSell", DbType="NChar(10)")]
		public string NumbersToSell
		{
			get
			{
				return this._NumbersToSell;
			}
			set
			{
				if ((this._NumbersToSell != value))
				{
					this.OnNumbersToSellChanging(value);
					this.SendPropertyChanging();
					this._NumbersToSell = value;
					this.SendPropertyChanged("NumbersToSell");
					this.OnNumbersToSellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellComment", DbType="NChar(10)")]
		public string SellComment
		{
			get
			{
				return this._SellComment;
			}
			set
			{
				if ((this._SellComment != value))
				{
					this.OnSellCommentChanging(value);
					this.SendPropertyChanging();
					this._SellComment = value;
					this.SendPropertyChanged("SellComment");
					this.OnSellCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellOrder_Transaction", Storage="_Transactions", ThisKey="Id", OtherKey="SellOrder")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.SellOrder1 = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.SellOrder1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<System.DateTimeOffset> _CompleteDate;
		
		private System.Nullable<long> _NumbersToTransaction;
		
		private System.Nullable<decimal> _TransactionPrice;
		
		private System.Nullable<long> _BuyOrder;
		
		private System.Nullable<long> _SellOrder;
		
		private EntityRef<BuyOrder> _BuyOrder1;
		
		private EntityRef<SellOrder> _SellOrder1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCompleteDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnCompleteDateChanged();
    partial void OnNumbersToTransactionChanging(System.Nullable<long> value);
    partial void OnNumbersToTransactionChanged();
    partial void OnTransactionPriceChanging(System.Nullable<decimal> value);
    partial void OnTransactionPriceChanged();
    partial void OnBuyOrderChanging(System.Nullable<long> value);
    partial void OnBuyOrderChanged();
    partial void OnSellOrderChanging(System.Nullable<long> value);
    partial void OnSellOrderChanged();
    #endregion
		
		public Transaction()
		{
			this._BuyOrder1 = default(EntityRef<BuyOrder>);
			this._SellOrder1 = default(EntityRef<SellOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompleteDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> CompleteDate
		{
			get
			{
				return this._CompleteDate;
			}
			set
			{
				if ((this._CompleteDate != value))
				{
					this.OnCompleteDateChanging(value);
					this.SendPropertyChanging();
					this._CompleteDate = value;
					this.SendPropertyChanged("CompleteDate");
					this.OnCompleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumbersToTransaction", DbType="BigInt")]
		public System.Nullable<long> NumbersToTransaction
		{
			get
			{
				return this._NumbersToTransaction;
			}
			set
			{
				if ((this._NumbersToTransaction != value))
				{
					this.OnNumbersToTransactionChanging(value);
					this.SendPropertyChanging();
					this._NumbersToTransaction = value;
					this.SendPropertyChanged("NumbersToTransaction");
					this.OnNumbersToTransactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionPrice", DbType="Decimal(15,15)")]
		public System.Nullable<decimal> TransactionPrice
		{
			get
			{
				return this._TransactionPrice;
			}
			set
			{
				if ((this._TransactionPrice != value))
				{
					this.OnTransactionPriceChanging(value);
					this.SendPropertyChanging();
					this._TransactionPrice = value;
					this.SendPropertyChanged("TransactionPrice");
					this.OnTransactionPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyOrder", DbType="BigInt")]
		public System.Nullable<long> BuyOrder
		{
			get
			{
				return this._BuyOrder;
			}
			set
			{
				if ((this._BuyOrder != value))
				{
					if (this._BuyOrder1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyOrderChanging(value);
					this.SendPropertyChanging();
					this._BuyOrder = value;
					this.SendPropertyChanged("BuyOrder");
					this.OnBuyOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellOrder", DbType="BigInt")]
		public System.Nullable<long> SellOrder
		{
			get
			{
				return this._SellOrder;
			}
			set
			{
				if ((this._SellOrder != value))
				{
					if (this._SellOrder1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellOrderChanging(value);
					this.SendPropertyChanging();
					this._SellOrder = value;
					this.SendPropertyChanged("SellOrder");
					this.OnSellOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BuyOrder_Transaction", Storage="_BuyOrder1", ThisKey="BuyOrder", OtherKey="Id", IsForeignKey=true)]
		public BuyOrder BuyOrder1
		{
			get
			{
				return this._BuyOrder1.Entity;
			}
			set
			{
				BuyOrder previousValue = this._BuyOrder1.Entity;
				if (((previousValue != value) 
							|| (this._BuyOrder1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BuyOrder1.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._BuyOrder1.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._BuyOrder = value.Id;
					}
					else
					{
						this._BuyOrder = default(Nullable<long>);
					}
					this.SendPropertyChanged("BuyOrder1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellOrder_Transaction", Storage="_SellOrder1", ThisKey="SellOrder", OtherKey="Id", IsForeignKey=true)]
		public SellOrder SellOrder1
		{
			get
			{
				return this._SellOrder1.Entity;
			}
			set
			{
				SellOrder previousValue = this._SellOrder1.Entity;
				if (((previousValue != value) 
							|| (this._SellOrder1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SellOrder1.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._SellOrder1.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._SellOrder = value.Id;
					}
					else
					{
						this._SellOrder = default(Nullable<long>);
					}
					this.SendPropertyChanged("SellOrder1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionsOverview_V")]
	public partial class TransactionsOverview_V
	{
		
		private System.Nullable<System.DateTimeOffset> _CompleteDate;
		
		private System.Nullable<decimal> _TransactionPrice;
		
		private System.Nullable<long> _NumbersToTransaction;
		
		private System.Nullable<System.DateTimeOffset> _BuyDate;
		
		private string _BuyComment;
		
		private string _SellDate;
		
		private string _SellComment;
		
		public TransactionsOverview_V()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompleteDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> CompleteDate
		{
			get
			{
				return this._CompleteDate;
			}
			set
			{
				if ((this._CompleteDate != value))
				{
					this._CompleteDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionPrice", DbType="Decimal(15,15)")]
		public System.Nullable<decimal> TransactionPrice
		{
			get
			{
				return this._TransactionPrice;
			}
			set
			{
				if ((this._TransactionPrice != value))
				{
					this._TransactionPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumbersToTransaction", DbType="BigInt")]
		public System.Nullable<long> NumbersToTransaction
		{
			get
			{
				return this._NumbersToTransaction;
			}
			set
			{
				if ((this._NumbersToTransaction != value))
				{
					this._NumbersToTransaction = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> BuyDate
		{
			get
			{
				return this._BuyDate;
			}
			set
			{
				if ((this._BuyDate != value))
				{
					this._BuyDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyComment", DbType="NVarChar(4000)")]
		public string BuyComment
		{
			get
			{
				return this._BuyComment;
			}
			set
			{
				if ((this._BuyComment != value))
				{
					this._BuyComment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellDate", DbType="NChar(10)")]
		public string SellDate
		{
			get
			{
				return this._SellDate;
			}
			set
			{
				if ((this._SellDate != value))
				{
					this._SellDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellComment", DbType="NChar(10)")]
		public string SellComment
		{
			get
			{
				return this._SellComment;
			}
			set
			{
				if ((this._SellComment != value))
				{
					this._SellComment = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
